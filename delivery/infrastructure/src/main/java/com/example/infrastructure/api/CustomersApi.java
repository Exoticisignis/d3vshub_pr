/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.infrastructure.api;

import com.example.infrastructure.models.Customer;
import com.example.infrastructure.models.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-16T17:35:02.597539500+02:00[Europe/Warsaw]")
@Validated
@Api(value = "customers", description = "the customers API")
public interface CustomersApi {

    default CustomersApiDelegate getDelegate() {
        return new CustomersApiDelegate() {};
    }

    /**
     * GET /customers : List all customers
     *
     * @param limit  (optional)
     * @return A list of customers. (status code 200)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "List all customers", nickname = "customersGet", notes = "", response = Customer.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of customers.", response = Customer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @GetMapping(
        value = "/customers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Customer>> customersGet(@ApiParam(value = "") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        return getDelegate().customersGet(limit);
    }


    /**
     * DELETE /customers/{id} : Delete customer by id
     *
     * @param id  (required)
     * @return Deleted (status code 204)
     *         or Id not found (status code 404)
     */
    @ApiOperation(value = "Delete customer by id", nickname = "customersIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 404, message = "Id not found") })
    @DeleteMapping(
        value = "/customers/{id}"
    )
    default ResponseEntity<Void> customersIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        return getDelegate().customersIdDelete(id);
    }


    /**
     * GET /customers/{id} : Get customer by id
     *
     * @param id  (required)
     * @return Get customer by id (status code 200)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "Get customer by id", nickname = "customersIdGet", notes = "", response = Customer.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get customer by id", response = Customer.class),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @GetMapping(
        value = "/customers/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Customer> customersIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        return getDelegate().customersIdGet(id);
    }


    /**
     * POST /customers : Create a customer
     *
     * @return Null response (status code 201)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "Create a customer", nickname = "customersPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Null response"),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @PostMapping(
        value = "/customers",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> customersPost() {
        return getDelegate().customersPost();
    }

}
