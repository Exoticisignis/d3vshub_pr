/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.infrastructure.api.api_def;

import com.example.infrastructure.api.delegates.OrdersApiDelegate;
import com.example.infrastructure.models.Error;
import com.example.infrastructure.models.OrderDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-16T17:35:02.597539500+02:00[Europe/Warsaw]")
@Validated
@Api(value = "orders", description = "the orders API")
public interface OrdersApi {

    default OrdersApiDelegate getDelegate() {
        return new OrdersApiDelegate() {};
    }

    /**
     * GET /orders/{customerId} : List all orders for a customer
     *
     * @param customerId  (required)
     * @return A list of orders for a customer. (status code 200)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "List all orders for a customer", nickname = "ordersCustomerIdGet", notes = "", response = OrderDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of orders for a customer.", response = OrderDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @GetMapping(
        value = "/ordersForCustomer/{customerId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OrderDTO>> ordersCustomerIdGet(@ApiParam(value = "",required=true) @PathVariable("customerId") Long customerId) {
        return getDelegate().ordersCustomerIdGet(customerId);
    }


    /**
     * GET /orders : List all orders
     *
     * @param limit  (optional)
     * @return A list of orders. (status code 200)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "List all orders", nickname = "ordersGet", notes = "", response = OrderDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of orders.", response = OrderDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @GetMapping(
        value = "/orders",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OrderDTO>> ordersGet(@ApiParam(value = "") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        return getDelegate().ordersGet(limit);
    }


    /**
     * DELETE /orders/{id} : Delete order by id
     *
     * @param id  (required)
     * @return Deleted (status code 204)
     *         or Id not found (status code 404)
     */
    @ApiOperation(value = "Delete order by id", nickname = "ordersIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 404, message = "Id not found") })
    @DeleteMapping(
        value = "/orders/{id}"
    )
    default ResponseEntity<String> ordersIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return getDelegate().ordersIdDelete(id);
    }


    /**
     * GET /orders/{id} : Get order by id
     *
     * @param id  (required)
     * @return Get order by id (status code 200)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "Get order by id", nickname = "ordersIdGet", notes = "", response = OrderDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get order by id", response = OrderDTO.class),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @GetMapping(
        value = "/orders/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<OrderDTO> ordersIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return getDelegate().ordersIdGet(id);
    }


    /**
     * POST /orders : Create an order
     *
     * @return Null response (status code 201)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Create an order", nickname = "ordersPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Null response"),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @PostMapping(
        value = "/orders",
        produces = { "application/json" }
    )
    default ResponseEntity<String> ordersPost(@RequestBody OrderDTO order) {
        return getDelegate().ordersPost(order);
    }

    /**
     * GET /ordersForItem/{itemId} : List all orders containing item
     *
     * @param itemId  (required)
     * @return A list of orders containing item. (status code 200)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "List all orders containing item", nickname = "ordersForItemItemIdGet", notes = "", response = OrderDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "A list of orders containing item.", response = OrderDTO.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @GetMapping(
            value = "/ordersForItem/{itemId}",
            produces = { "application/json" }
    )
    default ResponseEntity<List<OrderDTO>> ordersForItemIdGet(@ApiParam(value = "",required=true) @PathVariable("itemId") Long itemId) {
        return getDelegate().ordersForItemIdGet(itemId);
    }

    @ApiOperation(value = "Order raport for dates", nickname = "ordersDateRaport", notes = "", response = OrderDTO.class, responseContainer = "List", tags={ })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "A raport list of orders in specified dates", response = OrderDTO
                    .class, responseContainer = "List"),
            @ApiResponse(code = 404, message = "unexpected error", response = Error.class)
    })
    @GetMapping(
            value = "/ordersForDates",
            produces = { "application/json" }
    )
    default ResponseEntity<List<OrderDTO>> ordersInDates(@RequestBody String dates){
        return getDelegate().ordersInDates(dates);
    }
}
